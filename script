// enhancements.js
// Save as enhancements.js in the same folder as your HTML
// 1) Block right-click and some dev/view-source shortcuts
// 2) Add 3D tilt to headings (h1, h3) + click-to-open single-page modal viewer
// 3) Lightweight particles canvas + low CPU footprint

(function () {
  // ---------- 1) RIGHT-CLICK + SHORTCUT BLOCK ----------
  document.addEventListener('contextmenu', function (e) {
    // prevent right click
    e.preventDefault();
  }, {passive:false});

  document.addEventListener('keydown', function (e) {
    const tag = e.target && e.target.tagName ? e.target.tagName.toLowerCase() : null;
    const editable = e.target && (e.target.isContentEditable || tag === 'input' || tag === 'textarea' || tag === 'select');
    if (editable) return;

    // Block F12, Ctrl+Shift+I/J/C, Ctrl+U, Ctrl+S
    if (e.key === 'F12' ||
        (e.ctrlKey && e.shiftKey && /[ijc]/i.test(e.key)) ||
        (e.ctrlKey && /[us]/i.test(e.key))) {
      e.preventDefault(); e.stopPropagation(); return false;
    }
  }, {passive:false});


  // ---------- 2) 3D TITLES + SINGLE-PAGE VIEWER ----------
  function createModal() {
    const container = document.createElement('div');
    container.id = 'section-modal';
    container.setAttribute('aria-hidden', 'true');

    const card = document.createElement('div');
    card.className = 'modal-card';
    card.setAttribute('role', 'dialog');
    card.setAttribute('aria-modal', 'true');

    const closeBtn = document.createElement('button');
    closeBtn.className = 'close-btn';
    closeBtn.innerHTML = 'âœ•';
    closeBtn.addEventListener('click', close);
    closeBtn.addEventListener('keyup', (e) => { if (e.key === 'Escape') close(); });

    card.appendChild(closeBtn);
    container.appendChild(card);

    let raf = null;
    function attachTilt(el) {
      const maxTilt = 10;
      el.addEventListener('mousemove', (e) => {
        const rect = el.getBoundingClientRect();
        const px = (e.clientX - rect.left) / rect.width;
        const py = (e.clientY - rect.top) / rect.height;
        const rotY = (px - 0.5) * (maxTilt * 2);
        const rotX = (0.5 - py) * (maxTilt * 2);
        cancelAnimationFrame(raf);
        raf = requestAnimationFrame(() => {
          el.style.transform = `rotateX(${rotX}deg) rotateY(${rotY}deg) translateZ(0)`;
        });
      });
      el.addEventListener('mouseleave', () => {
        cancelAnimationFrame(raf);
        el.style.transform = '';
      });
    }

    function open(node, titleText) {
      // remove previous content except close button
      Array.from(card.children).forEach(child => {
        if (!child.classList.contains('close-btn')) child.remove();
      });

      const heading = document.createElement('h2');
      heading.className = 'modal-title';
      heading.textContent = titleText;
      card.appendChild(heading);

      const contentWrap = document.createElement('div');
      contentWrap.className = 'modal-content';
      contentWrap.style.maxHeight = 'calc(100vh - 140px)';
      contentWrap.style.overflow = 'auto';
      contentWrap.appendChild(node);
      card.appendChild(contentWrap);

      attachTilt(card);
      container.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      closeBtn.focus();
    }

    function close() {
      container.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      const content = card.querySelector('.modal-content');
      if (content) content.remove();
      card.style.transform = '';
    }

    document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && container.getAttribute('aria-hidden') === 'false') close(); });
    container.addEventListener('click', (e) => { if (e.target === container) close(); });

    return { container, open, close };
  }

  const modal = createModal();
  document.body.appendChild(modal.container);

  // Titles selection and interaction
  const titleSelectors = 'h1, h3';
  const titles = Array.from(document.querySelectorAll(titleSelectors));

  titles.forEach((title) => {
    // wrap inner content with title-card if not already
    if (!title.querySelector('.title-card')) {
      const wrapper = document.createElement('span');
      wrapper.className = 'title-card';
      while (title.firstChild) wrapper.appendChild(title.firstChild);
      title.appendChild(wrapper);
    }

    title.style.cursor = 'pointer';

    let rect = null;
    let rafId = null;
    const maxTilt = 12;

    function onMouseMove(e) {
      rect = rect || title.getBoundingClientRect();
      const px = (e.clientX - rect.left) / rect.width;
      const py = (e.clientY - rect.top) / rect.height;
      const rotY = (px - 0.5) * (maxTilt * 2);
      const rotX = (0.5 - py) * (maxTilt * 2);
      cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(() => {
        title.style.transform = `rotateX(${rotX}deg) rotateY(${rotY}deg) translateZ(8px)`;
        title.style.boxShadow = `${-rotY/2}px ${rotX/2}px 30px rgba(0,0,0,0.45)`;
      });
    }
    function onMouseLeave() {
      cancelAnimationFrame(rafId);
      title.style.transform = '';
      title.style.boxShadow = '';
      rect = null;
    }

    title.addEventListener('mousemove', onMouseMove);
    title.addEventListener('mouseleave', onMouseLeave);

    title.addEventListener('click', function () {
      let section = title.closest('section') || title.parentElement;
      const clone = section.cloneNode(true);
      // remove ids inside clone to avoid collisions
      clone.querySelectorAll('[id]').forEach(n => n.removeAttribute('id'));
      modal.open(clone, title.innerText || title.textContent);
    });
  });


  // ---------- 3) LIGHTWEIGHT PARTICLES ----------
  const enhancerBg = document.getElementById('enhancer-bg');
  if (enhancerBg) {
    const canvas = document.createElement('canvas');
    canvas.id = 'enhancer-canvas';
    enhancerBg.appendChild(canvas);
    const ctx = canvas.getContext('2d');

    let particles = [];
    const COUNT = Math.min(Math.max(18, Math.floor((window.innerWidth * window.innerHeight) / 80000)), 60);
    let width = 0, height = 0, lastTime = 0;

    function resize() {
      const dpr = window.devicePixelRatio || 1;
      width = canvas.width = Math.floor(enhancerBg.clientWidth * dpr);
      height = canvas.height = Math.floor(enhancerBg.clientHeight * dpr);
      canvas.style.width = enhancerBg.clientWidth + 'px';
      canvas.style.height = enhancerBg.clientHeight + 'px';
      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
      initParticles();
    }
    function initParticles() {
      particles = [];
      for (let i = 0; i < COUNT; i++) {
        particles.push({
          x: Math.random() * enhancerBg.clientWidth,
          y: Math.random() * enhancerBg.clientHeight,
          vx: (Math.random() - 0.5) * 0.4,
          vy: (Math.random() - 0.5) * 0.4,
          r: 0.6 + Math.random() * 1.8,
          alpha: 0.04 + Math.random() * 0.08
        });
      }
    }
    function step(t) {
      if (!lastTime) lastTime = t;
      const dt = Math.min(40, t - lastTime);
      lastTime = t;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      for (let i = 0; i < particles.length; i++) {
        const p = particles[i];
        p.x += p.vx * (dt / 16);
        p.y += p.vy * (dt / 16);
        if (p.x < -10) p.x = enhancerBg.clientWidth + 10;
        if (p.x > enhancerBg.clientWidth + 10) p.x = -10;
        if (p.y < -10) p.y = enhancerBg.clientHeight + 10;
        if (p.y > enhancerBg.clientHeight + 10) p.y = -10;

        ctx.beginPath();
        ctx.fillStyle = `rgba(200,220,235,${p.alpha})`;
        ctx.arc(p.x, p.y, p.r, 0, Math.PI * 2);
        ctx.fill();
        ctx.closePath();

        for (let j = i + 1; j < particles.length; j++) {
          const q = particles[j];
          const dx = p.x - q.x;
          const dy = p.y - q.y;
          const d2 = dx * dx + dy * dy;
          if (d2 < 120 * 120) {
            const dist = Math.sqrt(d2);
            const alpha = Math.max(0, (1 - dist / 120) * 0.06);
            ctx.beginPath();
            ctx.strokeStyle = `rgba(160,190,210,${alpha})`;
            ctx.lineWidth = 1;
            ctx.moveTo(p.x, p.y);
            ctx.lineTo(q.x, q.y);
            ctx.stroke();
            ctx.closePath();
          }
        }
      }

      if (!document.hidden) {
        requestAnimationFrame(step);
      } else {
        lastTime = 0;
      }
    }

    resize();
    requestAnimationFrame(step);
    let resizeTimer;
    window.addEventListener('resize', () => { clearTimeout(resizeTimer); resizeTimer = setTimeout(resize, 250); });
  }

  // End of IIFE
})();
